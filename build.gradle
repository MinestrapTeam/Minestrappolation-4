import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

version = "1.9.0-5.0.0"
group = "minestrapteam"
archivesBaseName = "Minestrappolation"

def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER)
{
	version += ".nightly_" + ENV.DRONE_BUILD_NUMBER
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = '1.9-12.16.1.1887'
	mappings = 'stable_24'

	if (file("../run").exists())
	{
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}
}

//noinspection GroovyAssignabilityCheck
sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'src/main/resources'

			// Exclude Dev Textures
			exclude '**/textures/dev'
			exclude '**/textures/dev/*'
		}
	}
}

//noinspection GroovyAssignabilityCheck
processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources) {
		exclude 'mcmod.info'

		exclude '**/*.json'
	}

	from(sourceSets.main.resources) {
		include '**/*.json'

		filter { String line ->
			Pattern clean = Pattern.compile(/ \s+|("(?:[^"\\]|\\.)*") /, Pattern.DOTALL);

			StringBuffer sb = new StringBuffer();
			Matcher m = clean.matcher(line);
			while (m.find())
			{
				m.appendReplacement(sb, "");
				if (m.group(1) != null) sb.append(m.group(1));
			}
			m.appendTail(sb);

			return sb ? sb.toString() : null;
		}
	}
}

task textureZip(type: Zip)
textureZip {
	classifier = 'avt'
	archiveName = "$archivesBaseName-$version-avt.zip";

	include('src/main/resources/assets/minecraft/**/*.*')
}

task devJar(type: Jar, dependsOn: 'classes')
devJar {
	classifier = 'dev'
	archiveName = "$archivesBaseName-$version-dev.jar"

	from("$buildDir/classes/main") {
		include('minestrapteam/mods/**')
	}
	from("$buildDir/resources/main")
}

artifacts {
	archives devJar
	archives textureZip
}

sourceJar {
	classifier = 'src'
	archiveName = "$archivesBaseName-$version-src.jar"
}

build.dependsOn 'devJar', 'textureZip'

dependencies {
	// you may put jars on which you depend on in ./libs
	// or you may define them like so..
	//compile "some.group:artifact:version:classifier"
	//compile "some.group:artifact:version"

	// real examples
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	//provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
	// except that these dependencies get remapped to your current MCP mappings
	//deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	//deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// for more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Fix IntelliJ assets
idea {
	module {
		inheritOutputDirs = true
	}
}

// Run Wrapper with more available Memory
wrapper {
	gradleVersion = '2.7'

	def jvmOpts = "-Xmx1g"
	inputs.property("jvmOpts", jvmOpts)

	doLast {
		def optsEnvVar = "DEFAULT_JVM_OPTS"
		scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
		batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
	}
}
